"""
Problem 2: Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

"""

import math

def generateFibSequence(max):
    """
    Generates Fibonacci Sequence up to number that does not exceed max

    max: number not exceeded in the Fibonacci Sequence
    """

    # Create starting list to store sequence
    fibSequence = [1, 2]

    # Initialize fibNext (arbitrarily negative infinity)
    fibNext = -math.inf

    # Track current index of list (where next Fibonnaci number will be added, initially at index 2)
    currentIndex = 2

    # Generating Fibonacci Sequence
    while fibNext < max:

        # Get next Fibonacci number and add to fibSequence
        fibNext = fibSequence[currentIndex - 1] + fibSequence[currentIndex - 2]
        fibSequence.append(fibNext)

        currentIndex += 1

    # Remove last item in sequence which exceeds max (not accounted in while loop)
    if fibSequence[-1] > max:
        fibSequence.pop()

    return fibSequence

def sumOfEven(list):
    """
    Input: List of number

    Gets sum of even numbers on a list
    """

    # Create empty set to store even numbers
    evenNumbers = []

    # Loop from 0 to 999
    for number in list:
        # Check if multiple of 2 /  Even number
        if number % 2 == 0:
            evenNumbers.append(number)

    # Get sum of multiples
    sumOfEvens = sum(evenNumbers)

    return sumOfEvens


# print(generateFibSequence(4000000)) # Prints list of generated Fibonacci Sequence
print(sumOfEven(generateFibSequence(4000000))) # Prints 4613732